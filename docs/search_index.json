[
["Chapter-Perturbation.html", "Chapter 4 Perturbation concept 4.1 Objective 4.2 Data set and useful libraries 4.3 Perturbation effect of some elements on the whole 4.4 Dissimilarity index between compositions 4.5 Rebalancing a misbalanced sample by perturbation", " Chapter 4 Perturbation concept 4.1 Objective The objective of this chapter is to show the user a visual example of perturbation effect in a Simplex, and to develop a mathematical workflow useful to adjust the ionome of potato crops for diagnostic purpose. Perturbation in compositional space plays the same role as translation plays in real space. The assumption is that some natural processes in nature can be interpreted as a change from one composition C1 to another C2 through the application of a perturbation: p ⊕ C1 ===&gt; C2. The difference between a new observation and the closest healthy composition (closest TN) can be back-transformed to the compositional space. The resulted vector is the perturbation vector. Theoretically, a misbalanced composition could be balanced (translated into a healthy zone) using a perturbation vector. Also, ionome of a new cultivar could be assigned to the closest healthy sample’s cultivar, where nutrient requirements have been already documented by fertilizer trials using perturbation. I compute a dissimilarity (or imbalance) index using the true negative clr as references for cultivars. Then, I describe the procedure used to rebalance a misbalanced composition. 4.2 Data set and useful libraries We need package compositions for further clr back-transformation to compositional space. The package reshape will be used to melt an intermediate data frame. ggtestures provides functions to draw textured rectangles and bars with the grid graphics system and with ggplot2. cowplot helps to combine multiple ggplot plots to make publication-ready plots. As explained at the end of the Chapter 3, I consider as True Negatives (TN) specimens (or healthy points) for this study, observations of the training data set having a high yield (HY) and correctly predicted by the random forest model. library(&quot;tidyverse&quot;) library(&quot;extrafont&quot;) library(&#39;compositions&#39;) library(&quot;reshape&quot;) library(&quot;ggtextures&quot;) library(&quot;cowplot&quot;) train_df = read_csv(&quot;output/train_df.csv&quot;) ## Parsed with column specification: ## cols( ## NoEssai = col_double(), ## NoBloc = col_double(), ## NoTraitement = col_double(), ## clrN = col_double(), ## clrP = col_double(), ## clrK = col_double(), ## clrMg = col_double(), ## clrCa = col_double(), ## clrFv = col_double(), ## RendVendable = col_double(), ## rv_cut = col_double(), ## yieldClass = col_character(), ## Cultivar = col_character(), ## Maturity5 = col_character(), ## tr_Pyield = col_character() ## ) test_df = read_csv(&quot;output/test_df.csv&quot;) ## Parsed with column specification: ## cols( ## NoEssai = col_double(), ## NoBloc = col_double(), ## NoTraitement = col_double(), ## clrN = col_double(), ## clrP = col_double(), ## clrK = col_double(), ## clrMg = col_double(), ## clrCa = col_double(), ## clrFv = col_double(), ## RendVendable = col_double(), ## rv_cut = col_double(), ## yieldClass = col_character(), ## Cultivar = col_character(), ## Maturity5 = col_character(), ## te_Pyield = col_character() ## ) train_df$Cultivar = factor(train_df$Cultivar) TNs = train_df %&gt;% filter(yieldClass == &#39;HY&#39; &amp; tr_Pyield == &#39;HY&#39;) clrNo = c(&quot;clrN&quot;, &quot;clrP&quot;, &quot;clrK&quot;, &quot;clrCa&quot;, &quot;clrMg&quot;, &quot;clrFv&quot;) # for simplicity 4.3 Perturbation effect of some elements on the whole This subsection will illustrate the principle that strictly positive data constrained to some whole, are inherently related to each other. Changing a proportion (so, perturbation on some proportion(s)) inherently affects at least another proportion, because such data convey only relative information (Aitchison, 1986). We use the training data set. Let’s perturb the original clrs values of train_df imbalanced samples. The next chunks select clr variables and filter only unbalaced subset. # Compute (or select here) the clrs leaf_clr_o &lt;- test_df %&gt;% select(clrNo) summary(leaf_clr_o) ## clrN clrP clrK clrCa ## Min. :0.05338 Min. :-3.193 Min. :-0.3560 Min. :-3.1532 ## 1st Qu.:0.61701 1st Qu.:-2.173 1st Qu.: 0.2914 1st Qu.:-1.9403 ## Median :0.72684 Median :-2.013 Median : 0.4488 Median :-1.7187 ## Mean :0.72230 Mean :-2.018 Mean : 0.4654 Mean :-1.7326 ## 3rd Qu.:0.86457 3rd Qu.:-1.870 3rd Qu.: 0.6109 3rd Qu.:-1.5148 ## Max. :1.19800 Max. :-1.324 Max. : 1.8047 Max. :-0.9303 ## clrMg clrFv ## Min. :-1.9616 Min. :2.701 ## 1st Qu.:-1.1439 1st Qu.:3.466 ## Median :-0.9909 Median :3.538 ## Mean :-0.9955 Mean :3.559 ## 3rd Qu.:-0.8363 3rd Qu.:3.647 ## Max. : 0.4679 Max. :4.330 # Perturb the original clrs pert_col &lt;- c(1, 4) # the column indices which is perturbed: clr_N and clr_K respectively perturbation &lt;- c(0.25, -0.25) # the amount added to the clr of the pert_col, same lenght as pert_col leaf_clr_f &lt;- leaf_clr_o for (i in seq_along(pert_col)) { leaf_clr_f[, pert_col[i]] &lt;- leaf_clr_f[, pert_col[i]] + perturbation[i] } # Perturb the original clrs pert_col &lt;- c(1, 2) # the column indices which is perturbed: clr_N and clr_K respectively perturbation &lt;- c(0.5, 0.5) # the amount added to the clr of the pert_col, same lenght as pert_col leaf_clr_f &lt;- leaf_clr_o for (i in seq_along(pert_col)) { leaf_clr_f[, pert_col[i]] &lt;- leaf_clr_f[, pert_col[i]] * (1 + perturbation[i]) } summary(leaf_clr_f) ## clrN clrP clrK clrCa ## Min. :0.08006 Min. :-4.789 Min. :-0.3560 Min. :-3.1532 ## 1st Qu.:0.92552 1st Qu.:-3.260 1st Qu.: 0.2914 1st Qu.:-1.9403 ## Median :1.09026 Median :-3.020 Median : 0.4488 Median :-1.7187 ## Mean :1.08346 Mean :-3.027 Mean : 0.4654 Mean :-1.7326 ## 3rd Qu.:1.29686 3rd Qu.:-2.805 3rd Qu.: 0.6109 3rd Qu.:-1.5148 ## Max. :1.79700 Max. :-1.986 Max. : 1.8047 Max. :-0.9303 ## clrMg clrFv ## Min. :-1.9616 Min. :2.701 ## 1st Qu.:-1.1439 1st Qu.:3.466 ## Median :-0.9909 Median :3.538 ## Mean :-0.9955 Mean :3.559 ## 3rd Qu.:-0.8363 3rd Qu.:3.647 ## Max. : 0.4679 Max. :4.330 The next one transforms clrs (original and perturbed clrs) back to compositions. # From clrs to compositions leaf_o &lt;- apply(leaf_clr_o, 1, function(x) exp(x) / sum(exp(x))) %&gt;% t() leaf_f &lt;- apply(leaf_clr_f, 1, function(x) exp(x) / sum(exp(x))) %&gt;% t() Then, we plot the original and perturbed ionomes to check a general tendency. Observation column plots the original “N”, “P”, “K”, “Ca”, “Mg” and “Fv” compositions, Perturbation represents new compositions after perturbation and Difference column stands for perturbation occured in the Observation to yied new compositions. Data are tidded before. rshleaf_o &lt;- melt(data.frame(leaf_o)) %&gt;% mutate(vector = rep(&quot;Observation&quot;, nrow(.))) ## Using as id variables rshleaf_f &lt;- melt(data.frame(leaf_f)) %&gt;% mutate(vector = rep(&quot;Perturbation&quot;, nrow(.))) ## Using as id variables #rshleaf_d &lt;- melt(data.frame(leaf_d)) %&gt;% mutate(vector = rep(&quot;3-Difference&quot;, nrow(.))) rshdf &lt;- bind_rows(rshleaf_o, rshleaf_f) rshdf$is_perturbed &lt;- ifelse(rshdf$variable %in% colnames(leaf_o[,pert_col]), &quot;Perturbed&quot;, &quot;Not perturbed&quot;) rshdf$variable &lt;- sub(pattern = &quot;clr&quot;, replacement = &quot;&quot;, x = rshdf$variable, fixed = TRUE) %&gt;% fct_relevel(&quot;N&quot;, &quot;P&quot;, &quot;K&quot;, &quot;Ca&quot;, &quot;Mg&quot;, &quot;Fv&quot;) glimpse(rshdf) ## Observations: 10,140 ## Variables: 4 ## $ variable &lt;fct&gt; N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N, N... ## $ value &lt;dbl&gt; 0.03805, 0.03657, 0.03610, 0.04983, 0.04389, 0.04... ## $ vector &lt;chr&gt; &quot;Observation&quot;, &quot;Observation&quot;, &quot;Observation&quot;, &quot;Obs... ## $ is_perturbed &lt;chr&gt; &quot;Perturbed&quot;, &quot;Perturbed&quot;, &quot;Perturbed&quot;, &quot;Perturbed... axis_titles &lt;- paste(&quot;Proportion of&quot;, levels(rshdf$variable)) names(axis_titles) &lt;- levels(rshdf$variable) ggplot(data = rshdf, aes(x = vector, y = value)) + facet_wrap(. ~ variable, scales = &quot;free&quot;, ncol = 3, strip.position = &quot;left&quot;, labeller = as_labeller(axis_titles)) + geom_boxplot(aes(fill = is_perturbed), outlier.size = 0.1) + labs(x = &quot;&quot;, y = &quot;&quot;, fill = &quot;Was the associated clr perturbed?&quot;) + scale_fill_manual(values=c(&quot;white&quot;, &quot;grey80&quot;)) + #geom_hline(yintercept = 0) + theme_bw() + theme(axis.text.x = element_text(angle = 45, hjust = 1), strip.background = element_blank(), strip.placement = &quot;outside&quot;, legend.position=&quot;bottom&quot;, panel.spacing = unit(2.5, &quot;lines&quot;)) + theme(text = element_text(family = &quot;Arial&quot;, face = &quot;bold&quot;, size = 12)) Figure 4.1: Perturbation effect of some elements on the whole. ggsave(&quot;images/wraped_perturb_boxplots.tiff&quot;, height = 8, width = 8, dpi = 300) All the components change when the clr of a single component is offset. The components whose clr has been perturbed obviously change the most (Perturbation). The component whose clr is the highest (generally Fv) compensate most of the perturbation. 4.4 Dissimilarity index between compositions The first step is to compute a dissimilarity index according to the distance from the closest healthy point (the closest TN). I use the Aitchison distance (multivariate Euclidean distance) between clr composition as the dissimilarity index. The chunk below shows the custom function used to compute euclidean distance. eucl_dist_f &lt;- function(x, y) { sqrt(sum((x-y)^2)) } For each unbalanced composition, I use the next loop to compute all the euclidean distances between all the compositions in “TNs” of the corresponding group. The computation is possible even if the ionomics groups is unknown. The loop returns the smallest Euclidean distance as the unbalanced index of that composition. The computed debalance (or imbalance) index is stored by a new vector debal. debal &lt;- c() debal_index &lt;- c() for (i in 1:nrow(train_df)) { clr_i &lt;- as.numeric(train_df[i, clrNo]) eucl_dist &lt;- apply(TNs %&gt;% filter(Cultivar == train_df$Cultivar[i]) %&gt;% select(clrNo), 1, function(x) eucl_dist_f(x = x, y = clr_i)) debal_index[i] &lt;- which.min(eucl_dist) debal[i] &lt;- eucl_dist[debal_index[i]] } train_df$debal &lt;- debal train_df %&gt;% glimpse() ## Observations: 2,537 ## Variables: 16 ## $ NoEssai &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1... ## $ NoBloc &lt;dbl&gt; 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3... ## $ NoTraitement &lt;dbl&gt; 2, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 5, 6... ## $ clrN &lt;dbl&gt; 0.4252302, 0.4885647, 0.7209165, 0.6379499, 0.473... ## $ clrP &lt;dbl&gt; -2.394957, -2.525335, -2.301249, -2.321358, -2.28... ## $ clrK &lt;dbl&gt; 1.1387291, 0.9418880, 0.7209165, 0.8174753, 0.718... ## $ clrMg &lt;dbl&gt; -0.5154924, -0.6426036, -0.8712796, -0.8087697, -... ## $ clrCa &lt;dbl&gt; -2.346167, -1.763195, -1.701628, -1.818254, -1.69... ## $ clrFv &lt;dbl&gt; 3.692658, 3.500681, 3.432323, 3.492956, 3.337752,... ## $ RendVendable &lt;dbl&gt; 40.35180, 41.01670, 46.79370, 47.01170, 15.11830,... ## $ rv_cut &lt;dbl&gt; 41.33053, 41.33053, 41.33053, 41.33053, 41.33053,... ## $ yieldClass &lt;chr&gt; &quot;LY&quot;, &quot;LY&quot;, &quot;HY&quot;, &quot;HY&quot;, &quot;LY&quot;, &quot;LY&quot;, &quot;HY&quot;, &quot;HY&quot;, &quot;... ## $ Cultivar &lt;fct&gt; Goldrush, Goldrush, Goldrush, Goldrush, Goldrush,... ## $ Maturity5 &lt;chr&gt; &quot;mid-season&quot;, &quot;mid-season&quot;, &quot;mid-season&quot;, &quot;mid-se... ## $ tr_Pyield &lt;chr&gt; &quot;LY&quot;, &quot;LY&quot;, &quot;HY&quot;, &quot;HY&quot;, &quot;LY&quot;, &quot;LY&quot;, &quot;HY&quot;, &quot;HY&quot;, &quot;... ## $ debal &lt;dbl&gt; 0.3245021, 0.1815859, 0.0000000, 0.0000000, 0.277... 4.5 Rebalancing a misbalanced sample by perturbation Let’s suppose that we got this point selected at random in unbalanced specimens. set.seed(92559) unbalanced &lt;- subset(train_df, debal !=0) unbalanced &lt;- unbalanced[sample(nrow(unbalanced), 1), ] t(unbalanced) ## [,1] ## NoEssai &quot;88&quot; ## NoBloc &quot;3&quot; ## NoTraitement &quot;7&quot; ## clrN &quot;0.5370708&quot; ## clrP &quot;-1.945691&quot; ## clrK &quot;0.215989&quot; ## clrMg &quot;-1.183551&quot; ## clrCa &quot;-1.238359&quot; ## clrFv &quot;3.61454&quot; ## RendVendable &quot;30.3082&quot; ## rv_cut &quot;36.19781&quot; ## yieldClass &quot;LY&quot; ## Cultivar &quot;FL 1533&quot; ## Maturity5 &quot;mid-season&quot; ## tr_Pyield &quot;LY&quot; ## debal &quot;0.1971632&quot; Or even, we could rather use the most unbalanced occurrence, why not ! unbalanced &lt;- subset(train_df, debal != 0) unbalanced &lt;- unbalanced[which.max(unbalanced$debal), ] misbalanced &lt;- unbalanced # copy t(misbalanced) ## [,1] ## NoEssai &quot;326&quot; ## NoBloc &quot;1&quot; ## NoTraitement &quot;5&quot; ## clrN &quot;1.024557&quot; ## clrP &quot;-1.777165&quot; ## clrK &quot;0.4840354&quot; ## clrMg &quot;-1.516881&quot; ## clrCa &quot;-1.922347&quot; ## clrFv &quot;3.707801&quot; ## RendVendable &quot;47.81398&quot; ## rv_cut &quot;59.073&quot; ## yieldClass &quot;LY&quot; ## Cultivar &quot;Vivaldi&quot; ## Maturity5 &quot;early mid-season&quot; ## tr_Pyield &quot;LY&quot; ## debal &quot;1.235302&quot; How could we rebalance it? The first step is to find the closest balanced point in the TNs of the corresponding cultivar. Let’s re-compute its Euclidean distances from TNs and identify the TNs sample from which the distance is minimum. misbalanced &lt;- misbalanced[clrNo] eucl_dist_misbal &lt;- apply(TNs %&gt;% filter(Cultivar == unbalanced$Cultivar) %&gt;% select(clrNo), 1, function(x) eucl_dist_f(x = x, y = misbalanced)) index_misbal &lt;- which.min(t(data.frame(eucl_dist_misbal))) index_misbal # return the index of the sample ## [1] 9 The closest healthy sample is the one which index is 9 in TNs charing the same cultivar with the new sample. Using this index we could refind the minimum imbalance index value computed. (misbal &lt;- eucl_dist_misbal[index_misbal]) ## [1] 1.235302 The Euclidean distance matches with the corresponding debal value: unbalanced$debal[1] = 1.2353019. The closest point in the TNs subset is this one: target_TNs &lt;- TNs %&gt;% filter(Cultivar == unbalanced$Cultivar) closest &lt;- target_TNs[index_misbal, ] t(closest) ## [,1] ## NoEssai &quot;15019&quot; ## NoBloc &quot;3&quot; ## NoTraitement &quot;6&quot; ## clrN &quot;0.5740564&quot; ## clrP &quot;-2.178977&quot; ## clrK &quot;0.6458072&quot; ## clrMg &quot;-0.5399901&quot; ## clrCa &quot;-1.800869&quot; ## clrFv &quot;3.299972&quot; ## RendVendable &quot;61.78&quot; ## rv_cut &quot;59.073&quot; ## yieldClass &quot;HY&quot; ## Cultivar &quot;Vivaldi&quot; ## Maturity5 &quot;early mid-season&quot; ## tr_Pyield &quot;HY&quot; Note that Cultivar of the misbalanced and the closest healthy composition are the same. I compute the clr difference between the closest and the misbalanced points. closest = closest[clrNo] clr_diff = closest - misbalanced t(clr_diff) ## [,1] ## clrN -0.4505001 ## clrP -0.4018120 ## clrK 0.1617718 ## clrCa 0.1214776 ## clrMg 0.9768913 ## clrFv -0.4078285 The perturbation vector is that clr difference back-transformed to leaf compositional space. comp_names &lt;- c(&quot;N&quot;, &quot;P&quot;, &quot;K&quot;, &quot;Ca&quot;, &quot;Mg&quot;, &quot;Fv&quot;) perturbation_vector &lt;- clrInv(clr_diff) names(perturbation_vector) &lt;- comp_names t(perturbation_vector) ## [,1] ## N 0.09193132 ## P 0.09651803 ## K 0.16957812 ## Ca 0.16288093 ## Mg 0.38315253 ## Fv 0.09593907 ## attr(,&quot;class&quot;) ## [1] acomp Next, we should compute the corresponding compositions of the clr coordinates of the misbalanced point, as well as the closest TN point. The vectors could be gathered in a table made up of perturbation vector, misbalanced composition and the closest reference sample (pmc). misbal_comp &lt;- clrInv(misbalanced) names(misbal_comp) &lt;- comp_names closest_comp &lt;- clrInv(closest) names(closest_comp) &lt;- comp_names pmc = rbind(perturbation_vector, misbal_comp, closest_comp) rownames(pmc) = c(&quot;perturbation_vector&quot;,&quot;misbal_comp&quot;,&quot;closest_comp&quot;) pmc ## N P K Ca Mg ## perturbation_vector 0.09193132 0.09651803 0.1695781 0.1628809 0.3831525 ## misbal_comp 0.06095000 0.00370000 0.0355000 0.0032000 0.0048000 ## closest_comp 0.05608600 0.00357460 0.0602581 0.0052172 0.0184090 ## Fv ## perturbation_vector 0.09593907 ## misbal_comp 0.89185000 ## closest_comp 0.85645510 We could even check that the simplex is closed to 1 for each vector. sum(perturbation_vector); sum(misbal_comp); sum(closest_comp) ## [1] 1 ## [1] 1 ## [1] 1 The closest composition minus the misbalanced composition should return the perturbation vector. print(closest_comp - misbal_comp) # soustraction ## N P K Ca Mg Fv ## [1,] 0.09193132 0.09651803 0.1695781 0.1628809 0.3831525 0.09593907 ## attr(,&quot;class&quot;) ## [1] acomp print(perturbation_vector) # for comparison ## N P K Ca Mg Fv ## [1,] 0.09193132 0.09651803 0.1695781 0.1628809 0.3831525 0.09593907 ## attr(,&quot;class&quot;) ## [1] acomp Or even, perturb the misbalanced point by the perturbation vector, you should obtain the closest TN point: print(misbal_comp + perturbation_vector) # perturbation ## N P K Ca Mg Fv ## [1,] 0.056086 0.0035746 0.0602581 0.0052172 0.018409 0.8564551 ## attr(,&quot;class&quot;) ## [1] acomp print(closest_comp) # for comparison ## N P K Ca Mg Fv ## [1,] 0.056086 0.0035746 0.0602581 0.0052172 0.018409 0.8564551 ## attr(,&quot;class&quot;) ## [1] acomp So, the assumption is true. The next codes show the concept using plots. A data frame is tidded for ggplot. df &lt;- data.frame(rbind(misbalanced, closest, clr_diff), vectors = c(&quot;Observation&quot;, &quot;Reference&quot;, &quot;Perturbation&quot;)) dfreshape = melt(df) # reshapes df for ggplot ## Using vectors as id variables dfreshape$variable &lt;- sub(pattern = &quot;clr&quot;, replacement = &quot;&quot;, x = dfreshape$variable, fixed = TRUE) #dfreshape$vectors &lt;- fct_relevel(&quot;Observation&quot;, &quot;Reference&quot;, &quot;Perturbation&quot;) The next two chunks plot with dots and histograms for each vector. Visualization is better with histograms. ggplot(data = dfreshape, aes(x = value, y = vectors, colour = vectors)) + geom_point() + facet_wrap(~ variable, scales = &quot;free_x&quot;) + labs(x=&#39;Nutrient clr coordinate&#39;, y =&#39;&#39;) + theme(text=element_text(family=&quot;Arial&quot;, face=&quot;bold&quot;, size=12)) + theme_bw() Figure 4.2: Perturbation vector computation example dotplot using the most imbalanced foliar sample. ggsave(&quot;images/perturb_dotplot.tiff&quot;, width = 7, height = 3) g1 &lt;- ggplot(data = dfreshape, aes(x = variable, y = value, fill = vectors)) + geom_bar(aes(fill = vectors), stat = &quot;identity&quot;, position = position_dodge()) + coord_flip() + theme_bw() + ylab(&quot;Nutrients clr coordinates&quot;) + xlab(&quot;Diagnostic nutrients&quot;) + theme(legend.title = element_blank()) + theme(text = element_text(family = &quot;Arial&quot;, face = &quot;bold&quot;, size = 12)) g1 + scale_fill_discrete(breaks = c(&quot;Observation&quot;,&quot;Reference&quot;,&quot;Perturbation&quot;)) + scale_fill_manual(values=c(&quot;grey50&quot;, &quot;grey80&quot;, &quot;black&quot;)) Figure 4.3: Perturbation vector computation example barplot using the most imbalanced foliar sample. ggsave(&quot;images/perturb_barplot.tiff&quot;, width = 6, height = 4) "]
]
